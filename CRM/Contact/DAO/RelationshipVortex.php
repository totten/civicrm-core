<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from xml/schema/CRM/Contact/RelationshipVortex.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:05b1db03e8fe90aecd81e7081013c5fd)
 */

/**
 * Database access object for the RelationshipVortex entity.
 */
class CRM_Contact_DAO_RelationshipVortex extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_relationship_vtx';

  /**
   * Icon associated with this entity.
   *
   * @var string
   */
  public static $_icon = 'fa-handshake-o';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Relationship ID
   *
   * @var int
   */
  public $id;

  /**
   * id of the relationship
   *
   * @var int
   */
  public $relationship_id;

  /**
   * id of the relationship
   *
   * @var int
   */
  public $relationship_type_id;

  /**
   * The vortex record is a permutation of the original relationship record. The orientation indicates whether it is forward (0; A/B) or reverse (1; B/A) relationship.
   *
   * @var int
   */
  public $orientation;

  /**
   * name for relationship of near_contact to far_contact.
   *
   * @var string
   */
  public $near_type;

  /**
   * id of the first contact
   *
   * @var int
   */
  public $near_contact_id;

  /**
   * name for relationship of far_contact to far_contact.
   *
   * @var string
   */
  public $far_type;

  /**
   * id of the second contact
   *
   * @var int
   */
  public $far_contact_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_relationship_vtx';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   */
  public static function getEntityTitle() {
    return ts('Relationship Vortexs');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'relationship_id', 'civicrm_relationship', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'relationship_type_id', 'civicrm_relationship_type', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'near_contact_id', 'civicrm_contact', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'far_contact_id', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Relationship ID'),
          'description' => ts('Relationship ID'),
          'required' => TRUE,
          'where' => 'civicrm_relationship_vtx.id',
          'table_name' => 'civicrm_relationship_vtx',
          'entity' => 'RelationshipVortex',
          'bao' => 'CRM_Contact_BAO_RelationshipVortex',
          'localizable' => 0,
        ],
        'relationship_id' => [
          'name' => 'relationship_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Relationship'),
          'description' => ts('id of the relationship'),
          'required' => TRUE,
          'where' => 'civicrm_relationship_vtx.relationship_id',
          'table_name' => 'civicrm_relationship_vtx',
          'entity' => 'RelationshipVortex',
          'bao' => 'CRM_Contact_BAO_RelationshipVortex',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Relationship',
          'html' => [
            'type' => 'Select',
          ],
        ],
        'relationship_type_id' => [
          'name' => 'relationship_type_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Relationship Type'),
          'description' => ts('id of the relationship'),
          'required' => TRUE,
          'where' => 'civicrm_relationship_vtx.relationship_type_id',
          'table_name' => 'civicrm_relationship_vtx',
          'entity' => 'RelationshipVortex',
          'bao' => 'CRM_Contact_BAO_RelationshipVortex',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_RelationshipType',
          'html' => [
            'type' => 'Select',
          ],
        ],
        'orientation' => [
          'name' => 'orientation',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Orientation (A/B or B/A)'),
          'description' => ts('The vortex record is a permutation of the original relationship record. The orientation indicates whether it is forward (0; A/B) or reverse (1; B/A) relationship.'),
          'required' => TRUE,
          'where' => 'civicrm_relationship_vtx.orientation',
          'default' => '0',
          'table_name' => 'civicrm_relationship_vtx',
          'entity' => 'RelationshipVortex',
          'bao' => 'CRM_Contact_BAO_RelationshipVortex',
          'localizable' => 0,
        ],
        'near_type' => [
          'name' => 'near_type',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Relationship Name (Near side)'),
          'description' => ts('name for relationship of near_contact to far_contact.'),
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_relationship_vtx.near_type',
          'table_name' => 'civicrm_relationship_vtx',
          'entity' => 'RelationshipVortex',
          'bao' => 'CRM_Contact_BAO_RelationshipVortex',
          'localizable' => 0,
        ],
        'near_contact_id' => [
          'name' => 'near_contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Contact ID (Near side)'),
          'description' => ts('id of the first contact'),
          'required' => TRUE,
          'where' => 'civicrm_relationship_vtx.near_contact_id',
          'table_name' => 'civicrm_relationship_vtx',
          'entity' => 'RelationshipVortex',
          'bao' => 'CRM_Contact_BAO_RelationshipVortex',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
        ],
        'far_type' => [
          'name' => 'far_type',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Relationship Name (Far side)'),
          'description' => ts('name for relationship of far_contact to far_contact.'),
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_relationship_vtx.far_type',
          'table_name' => 'civicrm_relationship_vtx',
          'entity' => 'RelationshipVortex',
          'bao' => 'CRM_Contact_BAO_RelationshipVortex',
          'localizable' => 0,
        ],
        'far_contact_id' => [
          'name' => 'far_contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Contact ID (Far side)'),
          'description' => ts('id of the second contact'),
          'required' => TRUE,
          'where' => 'civicrm_relationship_vtx.far_contact_id',
          'table_name' => 'civicrm_relationship_vtx',
          'entity' => 'RelationshipVortex',
          'bao' => 'CRM_Contact_BAO_RelationshipVortex',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'html' => [
            'type' => 'EntityRef',
          ],
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'relationship_vtx', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'relationship_vtx', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'UI_relationship' => [
        'name' => 'UI_relationship',
        'field' => [
          0 => 'relationship_id',
          1 => 'orientation',
        ],
        'localizable' => FALSE,
        'unique' => TRUE,
        'sig' => 'civicrm_relationship_vtx::1::relationship_id::orientation',
      ],
      'index_nearid_neartype' => [
        'name' => 'index_nearid_neartype',
        'field' => [
          0 => 'near_contact_id',
          1 => 'near_type',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_relationship_vtx::0::near_contact_id::near_type',
      ],
      'index_neartype' => [
        'name' => 'index_neartype',
        'field' => [
          0 => 'near_type',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_relationship_vtx::0::near_type',
      ],
      'index_nearid_fartype' => [
        'name' => 'index_nearid_fartype',
        'field' => [
          0 => 'near_contact_id',
          1 => 'far_type',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_relationship_vtx::0::near_contact_id::far_type',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
